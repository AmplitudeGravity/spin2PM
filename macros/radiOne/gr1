BasisDirectory[gr1] = StringDrop[DirectoryName[$Input], -1]
gr1 /: BasisSectors[gr1] := Get[StringJoin[BasisDirectory[gr1], 
    "/BasisSectors[gr1]"]]
gr1 /: CurrentState[gr1] := <|NewDsBasis -> True, GenerateIBP -> True, 
   AnalyzeSectors -> True, FindSymmetries -> False|>
gr1 /: CutDs[gr1] := {1, 1, 0, 1, 0}
gr1 /: Definitions[gr1] := {Hold[MetricTensor[] === dim, SetDim[dim]], 
   Hold[VecQ[l1], Declare[l1, Vector]], Hold[VecQ[q1], Declare[q1, Vector]], 
   Hold[VecQ[v0], Declare[v0, Vector]], Hold[VecQ[v1], Declare[v1, Vector]], 
   Hold[VecQ[v2], Declare[v2, Vector]], 
   Hold[LiteRed`Private`ExpresionType[q1] === LiteRed`Private`ExpresionType[
      q1], Declare[q1, LiteRed`Private`ExpresionType[q1]]], 
   Hold[LiteRed`Private`ExpresionType[qq] === LiteRed`Private`ExpresionType[
      qq], Declare[qq, LiteRed`Private`ExpresionType[qq]]], 
   Hold[LiteRed`Private`ExpresionType[v0] === LiteRed`Private`ExpresionType[
      v0], Declare[v0, LiteRed`Private`ExpresionType[v0]]], 
   Hold[LiteRed`Private`ExpresionType[v1] === LiteRed`Private`ExpresionType[
      v1], Declare[v1, LiteRed`Private`ExpresionType[v1]]], 
   Hold[LiteRed`Private`ExpresionType[v2] === LiteRed`Private`ExpresionType[
      v2], Declare[v2, LiteRed`Private`ExpresionType[v2]]], 
   Hold[LiteRed`Private`ExpresionType[y] === LiteRed`Private`ExpresionType[
      y], Declare[y, LiteRed`Private`ExpresionType[y]]], 
   Hold[sp[q1, q1] === qq, sp[q1, q1] = qq], 
   Hold[sp[v0, v0] === -(qq*(-1 + y^2)), sp[v0, v0] = -(qq*(-1 + y^2))], 
   Hold[sp[v1, v1] === 1, sp[v1, v1] = 1], Hold[sp[v2, v2] === 1, 
    sp[v2, v2] = 1], Hold[sp[q1, v0] === 0, sp[q1, v0] = 0], 
   Hold[sp[q1, v1] === 0, sp[q1, v1] = 0], Hold[sp[q1, v2] === 0, 
    sp[q1, v2] = 0], Hold[sp[v0, v1] === 0, sp[v0, v1] = 0], 
   Hold[sp[v0, v2] === 0, sp[v0, v2] = 0], Hold[sp[v1, v2] === y, 
    sp[v1, v2] = y]}
gr1 /: Ds[gr1] := {sp[l1, l1], qq + sp[l1, l1] - 2*sp[l1, q1], sp[l1, v0], 
   sp[l1, v1], sp[l1, v2]}
gr1 /: DsBasisQ[gr1] := True
gr1 /: EMs[gr1] := {q1, v0, v1, v2}
gr1 /: ExtMappedSectors[gr1] := {}
gr1 /: ExtSectorsMappings[gr1] := {}
gr1 /: IBP[gr1] := Get[StringJoin[BasisDirectory[gr1], "/IBP[gr1]"]]
gr1 /: Information[gr1] := (If[ValueQ[gr1::usage], 
    Information[gr1, LongForm -> False]]; 
   Print[Grid[Partition[Union[Replace[Replace[First /@ UpValues[gr1] /. 
          HoldPattern -> HoldForm, 
         {HoldPattern[HoldForm[(LiteRed`Private`f$_)[gr1, __]]] :> 
           HoldForm[LiteRed`Private`f$[gr1, "\[Ellipsis]"]]}, {1}], 
        {HoldPattern[LiteRed`Private`x$:HoldForm[(LiteRed`Private`f$_)[gr1, 
              ___]]] :> Button[LiteRed`Private`x$, 
           (SelectionMove[ButtonNotebook[], All, GeneratedCell]; 
             NotebookDelete[]; Information[Evaluate[LiteRed`Private`x$[[1,
                0]]], LongForm -> False]; Print[TableForm[Cases[UpValues[
                  gr1], HoldPattern[LiteRed`Private`a$_ :> 
                    LiteRed`Private`b$_] /; MatchQ[LiteRed`Private`a$[[1,0]], 
                   LiteRed`Private`x$[[1,0]]]] /. HoldPattern -> 
                 HoldForm]]) & , Appearance -> "Frameless", 
           BaseStyle -> "InformationLink"]}, {1}]], 5], 
     DefaultBaseStyle -> "InfoGrid"]])
gr1 /: jRules[gr1, 1, 1, 0, 1, 0] := 
  Get[StringJoin[BasisDirectory[gr1], "/jRules[gr1, 1, 1, 0, 1, 0]"]]
gr1 /: jRules[gr1, 1, 1, 0, 1, 1] := 
  Get[StringJoin[BasisDirectory[gr1], "/jRules[gr1, 1, 1, 0, 1, 1]"]]
gr1 /: jsOrder[gr1] := {"np", "cp", "-ds", "-ns"}
gr1 /: jsOrder[gr1, 0, 1, 0, 1, 0] := {{-1, 1, -1, 1, -1}, 
   {-1, 0, -1, 0, -1}, {0, -1, 0, 0, 0}, {1, 0, 0, 0, 0}, {0, 0, 1, 0, 0}}
gr1 /: jsOrder[gr1, 0, 1, 0, 1, 1] := {{-1, 1, -1, 1, 1}, {-1, 0, -1, 0, 0}, 
   {0, 1, 0, 1, 0}, {0, -1, 0, 0, 0}, {1, 0, 0, 0, 0}}
gr1 /: jsOrder[gr1, 1, 0, 0, 1, 0] := {{1, -1, -1, 1, -1}, 
   {0, -1, -1, 0, -1}, {-1, 0, 0, 0, 0}, {0, 1, 0, 0, 0}, {0, 0, 1, 0, 0}}
gr1 /: jsOrder[gr1, 1, 0, 0, 1, 1] := {{1, -1, -1, 1, 1}, {0, -1, -1, 0, 0}, 
   {1, 0, 0, 1, 0}, {-1, 0, 0, 0, 0}, {0, 1, 0, 0, 0}}
gr1 /: jsOrder[gr1, 1, 1, 0, 0, 0] := {{1, 1, -1, -1, -1}, 
   {0, 0, -1, -1, -1}, {-1, 0, 0, 0, 0}, {0, 0, 1, 0, 0}, {0, 0, 0, 1, 0}}
gr1 /: jsOrder[gr1, 1, 1, 0, 0, 1] := {{1, 1, -1, -1, 1}, {0, 0, -1, -1, 0}, 
   {1, 1, 0, 0, 0}, {-1, 0, 0, 0, 0}, {0, 0, 1, 0, 0}}
gr1 /: jsOrder[gr1, 1, 1, 0, 1, 0] := {{1, 1, -1, 1, -1}, {0, 0, -1, 0, -1}, 
   {-1, 0, 0, 0, 0}, {0, -1, 0, 0, 0}, {0, 0, 1, 0, 0}}
gr1 /: jsOrder[gr1, 1, 1, 0, 1, 1] := {{1, 1, -1, 1, 1}, {0, 0, -1, 0, 0}, 
   {1, 1, 0, 1, 0}, {-1, 0, 0, 0, 0}, {0, -1, 0, 0, 0}}
gr1 /: jSymmetries[gr1, 1, 1, 0, 1, 0] := 
  Get[StringJoin[BasisDirectory[gr1], "/jSymmetries[gr1, 1, 1, 0, 1, 0]"]]
gr1 /: jSymmetries[gr1, 1, 1, 0, 1, 1] := 
  Get[StringJoin[BasisDirectory[gr1], "/jSymmetries[gr1, 1, 1, 0, 1, 1]"]]
gr1 /: LI[gr1] := Get[StringJoin[BasisDirectory[gr1], "/LI[gr1]"]]
gr1 /: LMs[gr1] := {l1}
gr1 /: MappedSectors[gr1] := Get[StringJoin[BasisDirectory[gr1], 
    "/MappedSectors[gr1]"]]
gr1 /: MIs[gr1] := Get[StringJoin[BasisDirectory[gr1], "/MIs[gr1]"]]
gr1 /: NDs[gr1] := 5
gr1 /: NonZeroSectors[gr1] := Get[StringJoin[BasisDirectory[gr1], 
    "/NonZeroSectors[gr1]"]]
gr1 /: Parameters[gr1] := {qq, y, dim}
gr1 /: PowerShifts[gr1] := {0, 0, 0, 0, 0}
gr1 /: SectorsMappings[gr1] := {}
gr1 /: SectorsPattern[gr1] := {_, _, 0, _, _}
gr1 /: SimpleSectors[gr1] := Get[StringJoin[BasisDirectory[gr1], 
    "/SimpleSectors[gr1]"]]
gr1 /: SPs[gr1] := {sp[l1, l1], sp[l1, q1], sp[l1, v0], sp[l1, v1], 
   sp[l1, v2]}
gr1 /: SR[gr1] := Get[StringJoin[BasisDirectory[gr1], "/SR[gr1]"]]
gr1 /: Toj[gr1] := {sp[l1, l1] -> j[gr1, -1, 0, 0, 0, 0], 
   sp[l1, q1] -> (qq + j[gr1, -1, 0, 0, 0, 0] - j[gr1, 0, -1, 0, 0, 0])/2, 
   sp[l1, v0] -> j[gr1, 0, 0, -1, 0, 0], sp[l1, v1] -> 
    j[gr1, 0, 0, 0, -1, 0], sp[l1, v2] -> j[gr1, 0, 0, 0, 0, -1]}
gr1 /: UniqueSectors[gr1] := Get[StringJoin[BasisDirectory[gr1], 
    "/UniqueSectors[gr1]"]]
gr1 /: ZerojRule[gr1] := LiteRed`Private`jjj:j[gr1, __] :> 
   0 /; Module[{LiteRed`Private`jjs = 
       Rest[List @@ jSector[LiteRed`Private`jjj]]}, 
     Or @@ (BitOr[LiteRed`Private`jjs, #1] === #1 & ) /@ 
       {{1, 1, 0, 0, 1}, {1, 0, 0, 1, 1}, {0, 1, 0, 1, 1}}]
gr1 /: ZeroSectors[gr1] := Get[StringJoin[BasisDirectory[gr1], 
    "/ZeroSectors[gr1]"]]
gr1 /: SectorsMappings[gr1, LiteRed`Private`ns$:(0 | 1)..] := 
  Cases[SectorsMappings[gr1], HoldPattern[js[gr1, LiteRed`Private`ns$] -> _]]
gr1::usage = "1-loop basis with 4 external momenta.\nUse Information[gr1] to \
get basis summary.\nThis string can be redefined by setting \
gr1::usage=\"\[Ellipsis]\""; Information[gr1, LongForm -> False]; 
LiteRed`Private`CheckDefs[gr1]
BasisDirectory[gr1]
